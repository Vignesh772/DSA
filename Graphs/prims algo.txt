// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution{
	public:
	// Function to construct and print MST for
    // a graph represented using adjacency
    // list representation, with V vertices.
    
    int findMin(int key[],bool mst[],int V)
    {
        int i;
        int minn=INT_MAX;
        int index;
        for(i=0;i<V;i++)
        {
            if(mst[i]==false && key[i]<minn)
            {
                minn=key[i];
                index=i;
            }
        }
        return index;
    }
    int spanningTree(int V, vector<vector<int>> adj[]) {
        // code here
        bool mst[V];
        int i,count;
        int key[V];
        
        key[0]=0;
        int parent=-1;
        int ans=0;
        for(i=0;i<V;i++)
        {
            key[i]=INT_MAX;
            mst[i]=false;
        }
        key[0]=0;
        
        for(count=0;count<V-1;count++)
        {
            int min_index=findMin(key,mst,V);
            
            mst[min_index]=true;
            
            
            
            for(auto it=0;it<adj[min_index].size();it++)
            {
                if( (mst[adj[min_index][it][0]]==false) && (adj[min_index][it][1]<key[adj[min_index][it][0]]))
                {
                    key[adj[min_index][it][0]]=adj[min_index][it][1];
                    
                    
                }
            }
           
        }
            
            
        
        
        
        for(i=0;i<V;i++)
        {
            if(key[i]!=INT_MAX)
            
            {
                ans+=key[i];
                
            }
            
        }
        return ans;
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends