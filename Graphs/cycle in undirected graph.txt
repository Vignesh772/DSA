// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


/* This function is used to detect a cycle in undirected graph

*  g[]: array of vectors to represent graph
*  V: number of vertices
*/


bool dfs(vector<int> g[],vector<bool> &visited,int u,int p)
{
    visited[u]=true;
    
    
    for(auto i:g[u])
    {
        if(!visited[i])
        {
            if(dfs(g,visited,i,u))
            {
                return true;
            }
        }
        else if(i!=p || i==u )
        {
            return true;
        }
        
    }
    return false;
    
}
bool isCyclic(vector<int> g[], int V)
{
   // Your code here
   vector<bool> visited(V);
   int i;
   for(i=0;i<V;i++)
   {
       if(!visited[i] && dfs(g,visited,i,-1))
       {
          
               return true;
           
       }
   }
   return false;
   
   
}

// { Driver Code Starts.


int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int V, E;
        cin>>V>>E;
        
        // array of vectors to represent graph
        vector<int> adj[V];
        
        int u, v;
        for(int i=0;i<E;i++)
        {
            cin>>u>>v;
            
            // adding edge to the graph
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        cout << isCyclic(adj, V)<<endl;

    }
}
  // } Driver Code Ends