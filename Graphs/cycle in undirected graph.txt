// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


/*  Function to check if the given graph contains cycle
*   V: number of vertices
*   adj[]: representation of graph
*/


bool DFS(int v,vector<int> adj[],vector<bool> &visited,vector<bool> & recc)
{
    visited[v]=true;
    recc[v]=true;
    
    for(auto i:adj[v])
    {
        if(visited[i]==0)
        {
            if(DFS(i,adj,visited,recc))
            {
                return true;
            }
        }
        else if(recc[i]==true)
        {
            return true;
        }
        
        
    }
    recc[v]=false;
    return false;
    
}
bool isCyclic(int V, vector<int> adj[])
{
    // Your code here
    vector<bool> visited(V);
    vector<bool> recc(V);
    
    for(int i=0;i<V;i++)
    {
        if(!visited[i] && DFS(i,adj,visited,recc))
        {
            return true;
            
        }
    }
    return false;
}

// { Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int v, e;
	    cin >> v >> e;
	    
	    vector<int> adj[v];
	    
	    for(int i =0;i<e;i++){
	        int u, v;
	        cin >> u >> v;
	        adj[u].push_back(v);
	    }
	    
	    cout << isCyclic(v, adj) << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends