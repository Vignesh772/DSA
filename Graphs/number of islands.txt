Given a grid consisting of '0's(Water) and '1's(Land). Find the number of islands.
Note:An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i,e in all 8 directions.
 

Example 1:

Input: grid = {{0,1},{1,0},{1,1},{1,0}}
Output: 1
Explanation: The grid is-
0 1
1 0
1 1
1 0
All lands are connected.


Solution:
// { Driver Code Starts

#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

class Solution {
public:
    int row_move[8]={1,0,-1,0,1,-1,1,-1};
    int col_move[8]={0,1,0,-1,1,-1,-1,1};

    bool isValid(int row,int col,vector<vector<char>>& grid)
        {
            if(row>=0 && row<grid.size() && col>=0 && col<grid[0].size() && grid[row][col]=='1')
            {
                return true;
            }
            return false;
        }
    void dfs(vector<vector<char>>& grid,vector<vector<int>>& visited,int i,int j)
    {
        int k;
        visited[i][j]=1;
        
        for(k=0;k<8;k++)
        {
            if(isValid(i+row_move[k],j+col_move[k],grid) && visited[i+row_move[k]][j+col_move[k]]==0 )
            {
                dfs(grid,visited,i+row_move[k],j+col_move[k]);
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        
        int island=0;
        int i,j,k;
        vector<vector<int>> visited (grid.size(),vector<int>(grid[0].size(),0));
        //bool visited[10][10]={0};
        for(i=0;i<grid.size();i++)
        {
            for(j=0;j<grid[0].size();j++)
            {
                if(grid[i][j]=='1' && visited[i][j]==0)
                {
                    island++;
                    dfs(grid,visited,i,j);
                }
                else if(grid[i][j]=='0' && visited[i][j]==0)
                {
                    visited[i][j]=1;
                }
                
                
            }
        }
        return island;
        
        
        
        
        
    }
};


// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>grid(n, vector<char>(m, '#'));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.numIslands(grid);
		cout << ans <<'\n';
	}
	return 0;
}  // } Driver Code Ends