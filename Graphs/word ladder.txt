class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
        
       unordered_set<string> dict;
        dict.insert(wordList.begin(),wordList.end());
        
        queue<string> q;
        q.push(beginWord);
        int step=1;
        int i,j,k;
        
        while(!q.empty())
        {
            int n=q.size();
            
            for(i=0;i<n;i++)
            {
                string word=q.front();
                if(word==endWord)
                {
                    return step;
                }
                q.pop();
                dict.erase(word);
                
                for(j=0;j<word.size();j++)
                {
                    char c=word[j];
                    for(k=0;k<26;k++)
                    {
                        word[j]='a'+k;
                        if(dict.find(word)!=dict.end())
                        {
                            q.push(word);
                            dict.erase(word);
                        }
                    }
                    word[j]=c;
                }
            }
            step++;
        }
        return(0);
        
    }
};