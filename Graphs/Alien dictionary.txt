Given a sorted dictionary of an alien language having N words and k starting alphabets of standard dictionary. Find the order of characters in the alien language.
Note: Many orders may be possible for a particular test case, thus you may return any valid order.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer N and k denoting the size of the dictionary. Then in the next line are sorted space separated values of the alien dictionary.

Output:
For each test case in a new line output will be 1 if the order of string returned by the function is correct else 0 denoting incorrect string returned.




Solution:
// { Driver Code Starts
// Initial Template for C++
/* script for test case http://code.geeksforgeeks.org/PetjYq */
#include <bits/stdc++.h>

using namespace std;

string findOrder(string[], int, int);
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        string s[n];
        for (int i = 0; i < n; i++) cin >> s[i];

        string ss = findOrder(s, n, k);
        order = "";
        for (int i = 0; i < ss.size(); i++) order += ss[i];

        string temp[n];
        std::copy(s, s + n, temp);
        sort(temp, temp + n, f);

        bool f = true;
        for (int i = 0; i < n; i++)
            if (s[i] != temp[i]) f = false;

        cout << f;
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends


// User function Template for C++

/*
dict : array of strings denoting the words in alien langauge
N : Size of the dictionary
K : Number of characters
*/

string topo(vector<int> g[],int indegree[],int K)
{
    queue<int> q;
    int i;
    for(i=0;i<K;i++)
    {
        if(indegree[i]==0)
        {
            q.push(i);
        }
    }
    
    string ans="";
    while(!q.empty())
    {
        int curr=q.front();
        q.pop();
        ans+=('a'+curr);
        
        for(auto it=g[curr].begin();it!=g[curr].end();it++)
        {
            indegree[*it]--;
            if(indegree[*it]==0)
            {
                q.push(*it);
            }
            
        }
    }
        
        
        
        
     //cout<<ans<<" ";   
    return ans;
}
string findOrder(string dict[], int N, int K) {
    // Your code here
    
    vector<int> g[K];
    
    int i,k,j;
    int indegree[K+1];
        memset(indegree,0,sizeof(indegree));
    for(i=0;i<N-1;i++)
    {
        string word1=dict[i];
        string word2=dict[i+1];
        
        
         for(j = 0; j < min(word1.size(), word2.size()); j++)
        {
            if(word1[j] != word2[j])
            {
                int index1 = word1[j] - 'a';
                int index2 = word2[j] - 'a';
                
                g[index1].push_back(index2);
                indegree[index2]+=1;
                
                break;
            }
        }
        
        
    }
    
    
    return topo(g,indegree,K);
    
    
}