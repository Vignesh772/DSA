There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.





Solution:
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        
        vector<vector<int>> adj(numCourses);
        queue<int> q;
        
        int i;
        for(i=0;i<prerequisites.size();i++)
        {
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        
        int indegree[numCourses];
        int visited[numCourses];
        memset(indegree,0,sizeof(indegree));
        memset(visited,0,sizeof(visited));
        
        for(i=0;i<prerequisites.size();i++)
        {
            indegree[prerequisites[i][0]]++;
        }
        
        
        for(i=0;i<numCourses;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
                visited[i]=1;
            }
        }
        if(q.empty())
        {
            return false;
        }
        
        
        while(!q.empty())
        {
            int curr=q.front();
            q.pop();
            visited[curr]=1;
            
            for(int it:adj[curr])
            {
                indegree[it]-=1;
                if(indegree[it]==0)
                {
                    q.push(it);
                }
            }
        }
         for(i=0;i<numCourses;i++)
        {
             if(visited[i]==0)
             {
                 return false;
             }
         }
        return true;
        
        
    }
};