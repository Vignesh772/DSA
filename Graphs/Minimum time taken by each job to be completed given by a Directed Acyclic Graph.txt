Minimum time taken by each job to be completed given by a Directed Acyclic Graph
Difficulty Level : Hard
 Last Updated : 08 Nov, 2020
Given a Directed Acyclic Graph having V vertices and E edges, where each edge {U, V} represents the Jobs U and V such that Job V can only be started only after completion of Job U. The task is to determine the minimum time taken by each job to be completed where each Job takes unit time to get completed.




Solution:
#include <bits/stdc++.h>
using namespace std;
#define maxN 100000
 
// Adjacency List to store the graph
vector<int> graph[maxN];
 
// Array to store the in-degree of node
int indegree[maxN];
 
// Array to store the time in which
// the job i can be done
int jobs[maxN];
 
// Function to add directed edge
// between two vertices
void addEdge(int u, int v)
{
    // Insert edge from u to v
    graph[u].push_back(v);
 
    // Increasing the indegree
    // of vertex v
    indegree[v]++;
}


void printOrder(int n,int m)
{
    queue<int> q;
    int i;
    for(i=1;i<=n;i++)
    {
        if(indegree[i]==0)
        {
            q.push(i);
            jobs[i]=1;
        }
    }
    
    while(!q.empty())
    {
        int curr=q.front();
        q.pop();
        for(int it:graph[curr])
        {
            
            indegree[it]-=1;
            if(indegree[it]==0)
            {
                
                q.push(it);
            }
            
            if(jobs[it] < 1+jobs[curr])
            {
                jobs[it]=1+jobs[curr];
            }
            
        }
    }
    for(i=1;i<=n;i++)
    {
        cout<<jobs[i]<<" ";
    }
}
int main()
{
    // Given Nodes N and edges M
    int n, m;
    n = 10;
    m = 13;
 
    // Given Directed Edges of graph
    addEdge(1, 3);
    addEdge(1, 4);
    addEdge(1, 5);
    addEdge(2, 3);
    addEdge(2, 8);
    addEdge(2, 9);
    addEdge(3, 6);
    addEdge(4, 6);
    addEdge(4, 8);
    addEdge(5, 8);
    addEdge(6, 7);
    addEdge(7, 8);
    addEdge(8, 10);
 
    // Function Call
    printOrder(n, m);
    return 0;
}