// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution{
	public:
	/*  Function to find the number of strongly connected components
    *   using Kosaraju's algorithm
    *   V: number of vertices
    *   adj[]: array of vectors to represent graph
    */
    
    void dfs1(int v,vector<int> adj[],bool visited[],stack<int> &st)
    {
        visited[v]=true;
        
        for(auto i:adj[v])
        {
            if(visited[i]==false)
            {
                dfs1(i,adj,visited,st);
            }
        }
        st.push(v);
        
        
        
    }
    void dfs2(int v,vector<int> adj[],bool visited[])
    {
        visited[v]=true;
        
        for(auto i:adj[v])
        {
            if(visited[i]==false)
            {
                dfs2(i,adj,visited);
            }
        }
        
    }
    void reverse(vector<int> rev_adj[],int V,vector<int> adj[])
    {
        int i;
        for(i=0;i<V;i++)
        {
            for(auto j:adj[i])
            {
                rev_adj[j].push_back(i);
            }
            
        }
    }
    int kosaraju(int V, vector<int> adj[]) {
        //code here
        
        bool visited[V];
        memset(visited,false,sizeof(visited));
        
        int i;
        stack<int> st;
        for(i=0;i<V;i++)
        {
            if(visited[i]==false)
            {
                dfs1(i,adj,visited,st);
            }
        }
        vector<int> rev_adj[V];
        
        reverse(rev_adj,V,adj);
        
        memset(visited,false,sizeof(visited));
        int ans=0;
        while(!st.empty())
        {
            int curr=st.top();
            st.pop();
            
            if(visited[curr]==false)
            {
                ans++;
                dfs2(curr,rev_adj,visited);
            }
        }
        return ans;
        
    }
};

// { Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends