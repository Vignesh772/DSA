long long getMaxArea(long long heights[], int n){
    
    // Your code here
    int i,j;
    stack<int> st;
    
    
    int l[n];
    int r[n];
    
    l[0]=-1;
    st.push(0);
    
    for(i=1;i<n;i++)
    {
        while(!st.empty() && heights[st.top()] >= heights[i] )
        {
            st.pop();
        }
        
        if(st.empty())
        {
            
            l[i]=-1;
        }
        else
        {
            l[i]=st.top();
        }
        st.push(i);
    }
    
    
    while(!st.empty())
    {
        st.pop();

    }
    
    r[n-1]=n;
    st.push(n-1);
    for(i=n-2;i>=0;i--)
    {
        while(!st.empty() && heights[st.top()] >= heights[i] )
        {
            st.pop();
        }
        
        if(st.empty())
        
        {
            r[i]=n;
        }
        else
        {
            r[i]=st.top();
        }
        st.push(i);
    }
    
    long long int max_area=0;
    long long int area=0;
    
    for(i=0;i<n;i++)
    {
        area= heights[i] * (r[i]-l[i]-1);
        if(area> max_area)
        {
            max_area=area;
        }
    }
    return max_area;
    
}

// { Driver Code Starts.

int main()
 {
    long long t;

    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        
        long long arr[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        
        cout<<getMaxArea(arr, n)<<endl;
    
    }
	return 0;
}
  // } Driver Code Ends