// { Driver Code Starts
//Initial Template for C

#include <stdio.h>
#include <stdlib.h>


 // } Driver Code Ends
//User function Template for C


// arr[]: Input Array
// N : Size of the Array arr[]
// Function to count inversions in the array.

long long int merge(long long arr[],long long low,long long mid,long long high )
{
    long long n1=mid-low+1;
    long long  n2=high-mid;
    long long i=0,j=0,k=0;
    
    long long left[n1],right[n2];
    long long res=0;
    for(i=0;i<n1;i++)
    {
        left[i]=arr[low+i];
    }
    for(i=0;i<n2;i++)
    {
        right[i]=arr[mid+1+i];
    }
    i=0;
    j=0;
    k=low;
    while(i<n1 && j<n2)
    {
        if(left[i]<=right[j])
        {
            arr[k]=left[i];
            k++;
            i++;
        }
        else
        {
            arr[k]=right[j];
            k++;
            j++;
            res+=(n1-i);
            
        }
    }
    
    while(i<n1)
    {
        arr[k]=left[i];
        i++;
        k++;
    }
    while(j<n2)
    {
        arr[k]=right[j];
        j++;
        k++;
    }
    return res;
}
/*
long long merge(long long arr[], long long low, long long mid, long long high)
    {
        long long n1 = mid - low + 1;
        long long n2 = high - mid;
        
        long long right[n1], left[n2];
        
        for(long long i = 0; i < n1; i++)
        {
            left[i] = arr[low + i];
        }
        
        for(long long i = 0; i < n2; i++)
        {
            right[i] = arr[mid + i + 1];
        }
        
        long long i = 0, j = 0, k = low;
        long long res = 0;
        
        while(i < n1 && j < n2)
        {
            if(left[i] <= right[j])
            {
                arr[k++] = left[i++];
            }
            else
            {
                arr[k++] = right[j++];
                res += (n1 - i);
            }
        }
        
        while(i < n1)
        {
            arr[k++] = left[i++];
        }
        
        while(j < n2)
        {
            arr[k++] = right[j++];
        }
        
        return res;
    }
   */
long long mergesort(long long arr[],long long low,long long high)
{
    
   
    long long res=0;
    
    
    if(low<high)
    {
         long long mid=low+(high-low) /2;
        res+=mergesort(arr,low,mid);
        res+=mergesort(arr,mid+1,high);
        res+=merge(arr,low,mid,high);
    }
    return res;
}
long long inversionCount(long long arr[], long long N)
{
    // Your Code Here
    return mergesort(arr,0,N-1);
}



// { Driver Code Starts.

int main() {
    
    long long T;
    scanf("%ld", &T);
    
    while(T--){
        long long N;
        scanf("%ld", &N);
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            scanf("%ld", &A[i]);
        }
        
        printf("%ld\n", inversionCount(A,N) );
    }
    
    return 0;
}
  // } Driver Code Ends