// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data; 
        node = node->next; 
    }  
    cout<<"\n";
} 


 // } Driver Code Ends
//User function template for C++

/* 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    Node *reverse1(Node *head)
    {
        Node *temp,*curr,*pre;
        curr=head;
        temp=NULL;
        pre=NULL;
        
        while(curr)
        {
            temp=curr->next;
            curr->next=pre;
            pre=curr;
            curr=temp;
            
        }
        return pre;
    }
    Node* addOne(Node *head) 
    {
        // Your Code here
        // return head of list after adding one
        Node *rev=reverse1(head);
        
        
        Node *ptr=rev;
        int sum=(ptr->data+1);
        ptr->data=sum%10;
        int carry=sum/10;
        
        if(ptr->next==NULL && carry!=0)
        {
            Node *temp=new Node(carry);
                temp->next=NULL;
                ptr->next=temp;
                return reverse1(rev);
                
        }
        ptr=ptr->next;
        
        
        
        while(carry)
        {
            sum=ptr->data+carry;
            ptr->data=sum%10;
            carry=sum/10;
            if(ptr->next==NULL && carry!=0)
            {
                Node *temp=new Node(carry);
                temp->next=NULL;
                ptr->next=temp;
                break;
                
            }
            ptr=ptr->next;
            
        }
        return reverse1(rev);
        
        
        
    }
};

// { Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        
        Node* head = new Node( s[0]-'0' );
        Node* tail = head;
        for(int i=1; i<s.size(); i++)
        {
            tail->next = new Node( s[i]-'0' );
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head); 
    }
    return 0; 
} 
  // } Driver Code Ends