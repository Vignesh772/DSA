// { Driver Code Starts
//

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

Node* inputList(int size)
{
    Node *head, *tail;
    int val;
    
    cin>>val;
    head = tail = new Node(val);
    
    while(--size)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
}

Node* findIntersection(Node* head1, Node* head2);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    cin>> n >> m;
	    
	    Node* head1 = inputList(n);
	    Node* head2 = inputList(m);
	    
	    Node* result = findIntersection(head1, head2);
	    
	    printList(result);
	    cout<< endl;
	}
	return 0;
}
// } Driver Code Ends


/* The structure of the Linked list Node is as follows:

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

*/

Node* findIntersection(Node* head1, Node* head2)
{
    // Your Code Here
    set<int> s;
    set<int> s1;
    Node *ptr=head1;
    while(ptr)
    {
        s.insert(ptr->data);
        ptr=ptr->next;
    }
    
    ptr=head2;
    while(ptr)
    {
        s1.insert(ptr->data);
        ptr=ptr->next;
    }
    
    
    Node *ans=NULL;
    Node *ans_tail=NULL;

    auto it=s1.begin();
    while(it!=s1.end())
    {
        if(s.find(*it)!=s.end())
        {
            if(ans==NULL)
            {
                ans=new Node(*it);
                ans_tail=ans;
            }
            else
            {
                Node *temp=new Node(*it);
                ans_tail->next=temp;
                ans_tail=ans_tail->next;
            }
        }
        it++;
    }
    return ans;
    
}