// { Driver Code Starts
#include<bits/stdc++.h>

using namespace std;

struct Node
{
    int data;
    Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};


void print(Node *root)
{
    Node *temp = root;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}



 // } Driver Code Ends
/*

The structure of linked list is the following

struct Node
{
    int data;
    Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution
{
    public:
    Node *reverse1( Node *head)
    {
        Node *curr=head;
        Node *prev=NULL;
        Node *temp;
        
        while(curr!=NULL)
        {
            temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
            
            
            
        }
        return prev;
        
    }
    Node *compute(Node *head)
    {
        // your code goes here
       vector<int> v;
       Node *ptr=head;
       int i;
       while(ptr)
       {
           
           v.push_back(ptr->data);
           ptr=ptr->next;
       }
       vector<int> temp;
       temp.push_back(v[v.size()-1]);
       for(i=v.size()-2;i>=0;i--)
       {
           if(v[i]<v[i+1])
           {
               v[i]=v[i+1];
           }
           else
           {
               temp.push_back(v[i]);
           }
       }
       reverse(temp.begin(),temp.end());
       ptr=head;
       for(i=0;i<temp.size()-1;i++)
       {
           ptr->data=temp[i];
           ptr=ptr->next;
       }
       
       ptr->data=temp[i];
       ptr->next=NULL;
       return head;
        
    }
    
};
   


// { Driver Code Starts.

int main()
{
    int T;
	cin>>T;

	while(T--)
	{
		int K;
		cin>>K;
		struct Node *head = NULL;
        struct Node *temp = head;

		for(int i=0;i<K;i++){
		    int data;
		    cin>>data;
			if(head==NULL)
			    head=temp=new Node(data);
			else
			{
				temp->next = new Node(data);
				temp = temp->next;
			}
		}
        Solution ob;
        Node *result = ob.compute(head);
        print(result);
        cout<<endl;
    }
}
  // } Driver Code Ends