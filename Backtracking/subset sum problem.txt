Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.



Soultion:

// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


// User function Template for C++

class Solution{
public:


    bool isSafe(int total_sum,int sum)
    {
        
        if( (2*sum) > total_sum)
        {
            return false;
        }
        return true;
    }


    bool func(int n, int arr[],int total_sum)
    {
        if(total_sum==0)
       {
           return 1;
       }
       if(n==0)
       {
           return 0;
       }
       
       
       if(arr[n-1]>total_sum)
       {
           return(func(n-1,arr,total_sum));
       }
       
       return ( func(n-1,arr,total_sum-arr[n-1]) ||  func(n-1,arr,total_sum) );
       
    }
    int equalPartition(int N, int arr[])
    {
        // code here
        
        int total_sum=0;
        int i;
        for(i=0;i<N;i++)
        {
            total_sum+=arr[i];
        }
        if(total_sum%2==1)
        {
            return 0;
        }
        
        total_sum=total_sum/2;
        
        return (func(N,arr,total_sum));
        
        
        
        
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}  // } Driver Code Ends