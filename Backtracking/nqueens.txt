The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above



Solution:

class Solution {
public:
    vector<vector<string>> ans;
    int board[1000][1000];
    int N;
    
    
    
    void printt()
    {
        
        int i,j;
        string temp="";
        vector<string> v;
        for(i=0;i<N;i++)
        {
            temp="";
            for(j=0;j<N;j++)
            {
                if(board[j][i])
                {
                    temp+='Q';
                }
                else
                {
                    temp+='.';
                }
            }
            v.push_back(temp);
            
        }
        ans.push_back(v);
    }
    bool isSafe(int row,int col)
    {
        
        int i,j;
        
        
        for(i=0;i<col;i++)
        {
            if(board[row][i])
            {
                return false;
            }
        }
        
        for(i=row,j=col;i>=0 && j>=0;i--,j--)
        {
            if(board[i][j])
            {
                return false;
            }
        }
        
        for(i=row,j=col;i<N && j>=0;i++,j--)
        {
            if(board[i][j])
            {
                return false;
            }
        }
        return true;
        
        
    }
    
    bool nqueens(int col)
    {
        if(col==N)
        {
            printt();
            return true;
        }
        
        int i;
        int res=false;
        for(i=0;i<N;i++)
        {
            if(isSafe(i,col))
            {
                board[i][col]=1;
                res=nqueens(col+1) || res;
                board[i][col]=0;
            }
        }
        return res;
    }
    
    
    
    vector<vector<string>> solveNQueens(int n) {
        
        N=n;
        if(nqueens(0))
        {
            return ans;
        }
        return ans;
        
        
        
    }
};