
Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.



Solution:
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends



bool isSafe(bool graph[101][101],int v,int k,int color[],int n)
{
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(graph[v][i]==1)
            {
                if(color[i]==k)
                {
                    return false;
                    
                }
            }
        }
        
    }
    
    
    
    return true;
}
bool dfs(int v,int m,bool graph[101][101],int n,int visited[],int color[])
{
    
    visited[v]=1;
    if(v==n)
    {
        return true;
    }
    int k;
    
    
    
    
    
            for(k=1;k<=m;k++)
            {
                if(isSafe(graph,v,k,color,n))
                {
                    color[v]=k;
                    if(dfs(v+1,m,graph,n,visited,color))
                    {
                        return true;
                    }
                    
                        
                    
                    color[v]=0;
                    
                    
                }
                
            }
            
    
    return false;
    
    
}
bool graphColoring(bool graph[101][101], int m, int V) {
    // your code here
    
    int visited[V]={0};
    int color[V]={0};
    
    
    return dfs(0,m,graph,V,visited,color);
    
    
    
    
}

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        cout << graphColoring(graph, m, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends