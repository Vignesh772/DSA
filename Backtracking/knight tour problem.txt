Given a N*N board with the Knight placed on the first block of an empty board. Moving according to the rules of chess knight must visit each square exactly once. Print the order of each the cell in which they are visited.

Example:

Input : 
N = 8
Output:
0  59  38  33  30  17   8  63
37  34  31  60   9  62  29  16
58   1  36  39  32  27  18   7
35  48  41  26  61  10  15  28
42  57   2  49  40  23   6  19
47  50  45  54  25  20  11  14
56  43  52   3  22  13  24   5
51  46  55  44  53   4  21  12


Solution:
#include<iostream>
#include<bits/stdc++.h>
#include<vector>

using namespace std;



int N;

vector<pair<int,int>> moves;


bool isSafe(vector<vector<int>> &board,int row,int col)
{
    if(row>=0 && row<N && col>=0 && col<N && board[row][col]==-1)
    {
        return true;
    }
    return false;
}
bool knight(int n,vector<vector<int>> &board,int row,int col,int step)
{
    if(step==(N*N))
    {
        return true;
    }
    
    int choices;
    for(choices=0;choices<8;choices++)
    {
        int next_x=row+moves[choices].first;
        int next_y=col+moves[choices].second;
        if(isSafe(board,next_x,next_y))
        {
            //cout<<next_x<<" "<<next_y<<"\n";
            board[next_x][next_y]=step;
            
            if(knight(n,board,next_x,next_y,step+1))
            {
                return true;
            }
            else
            {
            board[next_x][next_y]=-1;
            }
            
        }
    }
    return false;
    
    
    
}
int main() {
    int n;
    cin>>n;
    N=n;
    //int board[N][N]={-1};
    vector<vector<int>> board(n , vector<int> (n, -1));
    
    moves.push_back({2,1});
    moves.push_back({1,2});
    moves.push_back({-1,2});
    moves.push_back({-2,1});
    moves.push_back({-2,-1});
    moves.push_back({-1,-2});
    moves.push_back({1,-2});
    moves.push_back({2,-1});
    board[0][0]=0;
    bool a=knight(n,board,0,0,1);
    if(a==0)
    {
        cout<<"Not possible"<<"\n";
        return 0;
    }
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<board[i][j]<<"    ";
        }
        cout<<"\n";
    }
    
    
}