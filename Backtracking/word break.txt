Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "snakesandladder",
dict = ["snake", "snakes", "and", "sand", "ladder"].

A solution is ["snakes and ladder",
           "snake sand ladder"].




Solution:
#include <iostream>
#include<set>
#include<vector>
using namespace std;


vector<string> ans;
void printt(string sentence)
{
    ans.push_back(sentence);
    cout<<"(";
    cout<<sentence;
    cout<<")";
    
}
bool breakwords(set<string> dictionary,string s,string temp,string sentence,int ind)
{
    if(ind==s.length())
    {
        printt(sentence);
        return true;
        
    }
    
    int i;
    bool res=false;
    for(i=ind;i<s.length();i++)
    {
        temp=temp+s[i];
        //cout<<temp<<"-"<<i<<" ";
        if(dictionary.find(temp)!=dictionary.end())
        {
            if(sentence!="")
                res=breakwords(dictionary,s,"",sentence+" "+temp,i+1) || res;
            else
            {
                res=breakwords(dictionary,s,"",sentence+temp,i+1) || res;
            }
            
        }
    }
    return res;
    
}

int main() {
	
	int t;
    cin>>t;
	int n;
	while(t--)
	{
	    
	    cin>>n;
	    set<string> dictionary;
	    string a;
        string s;
	    for(int i=0;i<n;i++)
	    {
	       cin>>a;
            dictionary.insert(a);
	    }
        cin>>s;
        
        if(!breakwords(dictionary,s,"","",0))
        {
            cout<<"-1";
        }
        cout<<"\n";
       
        
        
	    
	}
	
	
}