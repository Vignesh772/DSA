Find shortest safe route in a path with landmines
Difficulty Level : Hard
 Last Updated : 29 Dec, 2020
Given a path in the form of a rectangular matrix having few landmines arbitrarily placed (marked as 0), calculate length of the shortest safe route possible from any cell in the first column to any cell in the last column of the matrix. We have to avoid landmines and their four adjacent cells (left, right, above and below) as they are also unsafe. We are allowed to move to only adjacent cells which are not landmines. i.e. the route cannot contains any diagonal moves.

Examples:  

Input: 
A 12 x 10 matrix with landmines marked as 0

[ 1  1  1  1  1  1  1  1  1  1 ]
[ 1  0  1  1  1  1  1  1  1  1 ]
[ 1  1  1  0  1  1  1  1  1  1 ]
[ 1  1  1  1  0  1  1  1  1  1 ]
[ 1  1  1  1  1  1  1  1  1  1 ]
[ 1  1  1  1  1  0  1  1  1  1 ]
[ 1  0  1  1  1  1  1  1  0  1 ]
[ 1  1  1  1  1  1  1  1  1  1 ]
[ 1  1  1  1  1  1  1  1  1  1 ]
[ 0  1  1  1  1  0  1  1  1  1 ]
[ 1  1  1  1  1  1  1  1  1  1 ]
[ 1  1  1  0  1  1  1  1  1  1 ]

Output:  
Length of shortest safe route is 13 (Highlighted in Bold)





Solution:
#include<iostream>
using namespace std;

#define R 12
#define C 10
int row_move[4]={0,1,-1,0};
int col_move[4]={1,0,0,-1};
bool isValid(int row,int col)
{
    
    if(row>=0 && row<R && col>=0 && col<C)
    {
        return true;
    }
    return false;
}
bool isSafe(int mat[R][C],int row,int col,int visited[R][C])
{
    
    if(mat[row][col]==0 || visited[row][col]==1)
    {
        return false;
    }
    return true;
}
void findPath(int mat[R][C],int row,int col,int &min_dis,int dis,int visited[R][C])
{
    if(col==C-1)
    {
        min_dis = min(dis, min_dis);
        return;
    }
    if(dis>min_dis)
    {
        return;
    }
    
    visited[row][col]=1;
    int i,k;
    for(k=0;k<4;k++)
    {
        if(isValid(row+row_move[k],col+col_move[k]) && isSafe(mat,row+row_move[k],col+col_move[k],visited))
        {
            findPath(mat,row+row_move[k],col+col_move[k],min_dis,dis+1,visited);
        }
    }
    visited[row][col] = 0;
    
    
}

void findShortestPath(int mat[R][C])
{
    int i,j,k;
    
    for(i=0;i<R;i++)
    {
        for(j=0;j<C;j++)
        {
            if(mat[i][j]==0)
            {
                for(k=0;k<4;k++)
                {
                    if(isValid(i+row_move[k],j+col_move[k]))
                    {
                        mat[i+row_move[k]][j+col_move[k]]=-1;
                    }
                }
            }
        }
    }
    
    for(i=0;i<R;i++)
    {
        for(j=0;j<C;j++)
        {
            if(mat[i][j]==-1)
            {
                mat[i][j]=0;
            }
        }
    }
    
    
    int visited[R][C];
    int min_dis=INT_MAX;
    for(i=0;i<R;i++)
    {
       
        if(mat[i][0]==1)
        {
             memset(visited, 0, sizeof visited);
            findPath(mat,i,0,min_dis,0,visited);
             if(min_dis == C - 1)
                break;
        }
       
        
    }
    
    if(min_dis==INT_MAX)
    {
        cout<<"No path available";
    }
    else
    {
        cout<<min_dis;
    }
    
    
    
    
}

int main() {
    int mat[R][C] = 
    { 
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
        { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 }, 
        { 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 }, 
        { 1, 1, 1, 1, 0, 1, 1, 1, 1, 1 }, 
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
        { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, 
        { 1, 0, 1, 1, 1, 1, 1, 1, 0, 1 }, 
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
        { 0, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, 
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
        { 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 } 
    }; 
     
    // find shortest path
    findShortestPath(mat); 
}